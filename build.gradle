import org.gradle.api.artifacts.*

buildscript {
    repositories {
         mavenRepo url: "http://localhost:8081/nexus/content/groups/public/"
         //mavenRepo url: "http://nexus.int.mttnow.com/content/groups/ng/"
    }

    dependencies {
        classpath "au.com.ish.gradle:release:2.0"
        //classpath "com.mttnow.gradle:gradle-plugins:0.8.5-SNAPSHOT"
    }
}

project.ext {
    springCoreVersion = "3.1.3.RELEASE"
    jacocoVersion = "0.6.1.201212231917"
    jBehaveVersion = "3.7.4"
}

apply plugin: 'base' // To add "clean" task to the root project.
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply plugin: "release"

release {
    failOnSnapshotDependencies = false
    allowLocalModifications = true
    releaseDryRun = true
    scm = "git"
}


allprojects{
    apply from: rootProject.file('build-code-coverage-report.gradle')
}

//configurations{
//}
//repositories {    
    //mavenRepo url: "http://nexus.int.mttnow.com/content/groups/ng/"
    
//}
//dependencies{

//}

subprojects {
    apply from: rootProject.file('common.gradle')
}

//task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
//    title = 'All modules'
//    destinationDir = new File(project.buildDir, 'merged-javadoc')
//
//    // Note: The closures below are executed lazily.
//    source {
//       subprojects*.sourceSets*.main*.allSource
//    }
//    classpath.from {
//        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
//    }
//}

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
    gradleVersion = '1.3'
}

idea {
    project {
        ipr {
            withXml { provider ->
                provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
            }
        }
    }
}

