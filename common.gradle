import org.apache.tools.ant.taskdefs.Jar

//
// This file is to be applied to every subproject.
//

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

String mavenGroupId = 'com.mttnow.push'
String mavenVersion = '1.0-SNAPSHOT'

sourceCompatibility = '1.6'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


configurations{
	compile {
        description = 'compile classpath'
        transitive = true
    }
    runtime {
        extendsFrom compile
    }
    //provided scope not available in Gradle
    //cannot use providedCompile as this is used by war plugin
    provided
    //test configuration for test dependencies in submodules
    tests
}

repositories {
    mavenRepo url: "http://localhost.134:8081/nexus/content/groups/public/"
    //mavenRepo url: "http://nexus.int.mttnow.com/content/groups/ng/"
    
    mavenCentral();
}

String mavenArtifactId = name

group = mavenGroupId
version = mavenVersion

/**
task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources'
    from sourceSets.main.allSource
}
 */

artifacts {
    archives jar
    //archives sourcesJar
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        groupId = mavenGroupId
        artifactId = mavenArtifactId
        version = mavenVersion
    }
}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if (!srcDir.isDirectory()) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}



test {
    systemProperty "file.encoding", "UTF-8"
    systemProperty "java.awt.headless", "true"

    // JaCoCo uses an agent to do code coverage instrumentation on loading rather than instrumenting class files on disk
    // we set the jacoco property in case code needs to know that jacoco is active (otherwise some reflection tests fail)

}
